media1 <- t(a)%*%media
intervalos.incremento.osos.4a5 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,-1,1,0), ncol = 1 )
media2 <- t(a)%*%media
intervalos.incremento.osos.3a4 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
intervalos.incremento.osos.2a3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
incrementos <- rbind(intervalos.incremento.osos.2a3, intervalos.incremento.osos.3a4,
intervalos.incremento.osos.4a5)
row.names(incrementos) <- c('incremento.osos.2a3', 'incremento.osos.3a4',
'incremento.osos.4a5')
#xtable(incrementos)
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos <- as.data.frame(incrementos.osos)
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S_z <- t(a)%*%cov(osos)%*%a
colnames(S_z) <- c('incremento.2a3', 'incremento.4a5')
media.z <- matrix(apply(incrementos.osos, 2, mean))
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media.z, xlim=c(-20,60),
ylim=c(-20,30))
points(incrementos.osos[,1], incrementos.osos[,2], col='gray', pch=20)
points(media.z[1], media.z[2], col ='green', pch=20)
abline(v = incrementos$lim.inferior.T2intervalo.media.al0.95[1], col ='steelblue' )
abline(v = incrementos$lim.superior.T2intervalo.media.al0.95[1], col ='steelblue' )
abline(h = incrementos$lim.inferior.T2intervalo.media.al0.95[3], col ='steelblue' )
abline(h = incrementos$lim.superior.T2intervalo.media.al0.95[3], col ='steelblue' )
Bonferroni.intervalos <- function(S,media, alpha, n, p, a)
{
#alpha (numeric): nivel de significancia conjunto
#n (numeric): numero de observaciones
#p (numeric): numero de variables OJO DEBE DE SER LA DIMENSION DEL VECTOR ALEATORIO NORMAL MULTIVARIADO
#media (vector): vector-columna de medias ORIGINALES MUESTRALES
#S (matrix): matriz de covarianzas ORIGINAL MUEsTRAL
#a (vector): vector columna que expresa combinacion lineal
media <- t(media)%*%a
ss <- t(a)%*%S%*%a
nivel <- qt(1-(alpha/(2*p)), df = n-1, lower.tail =TRUE)
errores <- nivel*sqrt(ss/n)
inf.intervalos <- media - rep(errores, length(media))
sup.intervalos <- media + rep(errores, length(media))
alpha_ <- alpha/(2*p)
a <- round(1-alpha_,3)
a <- as.character(a)
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.Bonferri.media.al',
'media.muestral',
'lim.superior.Bonferri.media.al'),
c(a,'',a  ))
return(intervalos)
}
medias.osos.len <- matrix(apply(osos, 2, mean))
S <- cov(osos)
n <- dim(osos)[1]
p <- dim(osos)[2]
alpha <- 0.05
a <- as.matrix(c(1,0,0,0), ncol=1)
intervalos.bonferri.len1 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,1,0,0), ncol=1)
intervalos.bonferri.len2 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,0,1,0), ncol=1)
intervalos.bonferri.len3 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,0,0,1), ncol=1)
intervalos.bonferri.len4 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
intervalos.bonferri.len <- rbind(intervalos.bonferri.len1, intervalos.bonferri.len2,
intervalos.bonferri.len3, intervalos.bonferri.len4)
row.names(intervalos.bonferri.len) <- colnames(osos)
#xtable(intervalos.bonferri.len)
a <- t(matrix(c(-1,1,0,0), ncol = 4, byrow = TRUE ))
intervalos.bonferri.incremento1 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
a <- as.matrix(c(0,-1,1,0), ncol=1)
intervalos.bonferri.incremento2 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
a <- as.matrix(c(0,0,-1,1), ncol=1)
intervalos.bonferri.incremento3 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
intervalos.bonferri.incremento <-rbind(intervalos.bonferri.incremento1,
intervalos.bonferri.incremento2,
intervalos.bonferri.incremento3)
row.names(intervalos.bonferri.incremento) <- c('incremento.2a3',
'incremento.3a4',
'incremento.4a5')
#xtable(intervalos.bonferri.incremento)
costos <- read.table(file='costofliving.txt', header = TRUE )
Z <- costos[, c('pop', 'income') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando todas
#las variables
errores <- Y - Z%*%B_hat
sigma <- (t(errores)%*%errores)/(n) #el estimador MLE entre 'n'
Z <- costos[, c('income') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando solo
#la variable 'income'
errores <- Y - Z%*%B_hat
sigma_pop <- (t(errores)%*%errores)/(n) #el MLE divido entre 'n'
q <- 1
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado.pop  <- log(det(sigma)/det(sigma_pop))*(-1)*(n-r-.5*(m-r+q+1))
test1 <- qchisq(1-.05, df=m*(r-q))
Z <- costos[, c('pop') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando
#solo la variable 'pop'
errores <- Y - Z%*%B_hat
sigma.income<-(t(errores)%*%errores)/(n) #el MLE divido entre 'n'
q <- 1 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado.income  <- log(det(sigma)/det(sigma.income))*
(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(rent~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(house~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(COL~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
inversiones <- read.table('cash hi tech.txt', header =FALSE,
sep ='\t', skip = 2, dec=c(',','.'))
colnames(inversiones) <- c('Company', 'Marketcap.Mil', 'Net.cash.Mil',
'Cashflo.2009',
'Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital',
'Current.Dividend',
'Dividend.al.60.poyout')
inversiones.limpio <- apply(inversiones[, 2:dim(inversiones)[2]], 2,
function(x)
{
as.numeric(as.character(x))
})
inversiones.limpio <- as.data.frame(inversiones.limpio)
inversiones.limpio <- cbind(inversiones[,1], inversiones.limpio)
colnames(inversiones.limpio)[1] <- 'Company'
Z <- inversiones.limpio[, c('Marketcap.Mil', 'Net.cash.Mil', 'Cashflo.2009')]
r <- dim(Z)[2]+1
Y <- inversiones.limpio[, c('Current.Dividend',
'Dividend.al.60.poyout')]
modelo1 <- lm(as.matrix(Y)~as.matrix(Z))
n <- dim(inversiones.limpio)[1]
Sigma <- (t(modelo1$residuals)%*%modelo1$residuals)/n #estimador MLE
modelo.nulo <- lm(as.matrix(Y) ~ 1)
Sigma.nulo <- t(modelo.nulo$residuals)%*%modelo.nulo$residuals/n
q <- 3 #numero de vectores que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma)/det(Sigma.nulo))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo1)
Z2 <- inversiones.limpio[, c('Marketcap.Mil', 'Net.cash.Mil',
'Cashflo.2009',
'Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital' )]
r <- dim(Z2)[2]+1
modelo.saturado <- lm(as.matrix(Y)~as.matrix(Z2))
n <- dim(inversiones.limpio)[1]
Sigma.saturado <- (t(modelo.saturado$residuals)%*%
modelo.saturado$residuals)/n #estimador MLE
q <- 3 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma.saturado)/det(Sigma))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo.saturado)
Z3 <- inversiones.limpio[, c('Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital' )]
r <- dim(Z3)[2]+1
modelo.aumentado <- lm(as.matrix(Y)~as.matrix(Z3))
n <- dim(inversiones.limpio)[1]
Sigma.umentado <- (t(modelo.aumentado$residuals)%*%
modelo.aumentado$residuals)/n #estimador MLE
q <- 2 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- (log(det(Sigma.umentado)/det(Sigma.nulo)))**(-1)*(-1)*
(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
Z4 <- inversiones.limpio[, c('Cashflow.porcentaje.capital')]
r <- 1+1
modelo.simple <- lm(as.matrix(Y)~as.matrix(Z4))
n <- dim(inversiones.limpio)[1]
Sigma.simple <- (t(modelo.simple$residuals)%*%
modelo.simple$residuals)/n #estimador MLE
q <- 1 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma.umentado)/det(Sigma.simple))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo.simple)
(2*pi)^(-n*2/2)*exp(-n*2/2)*det(Sigma.simple)^(-n/2)
(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.simple)^(-n/2)/(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.umentado)^(-n/2)
n <-10
n <-15
(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.simple)^(-n/2)/(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.umentado)^(-n/2)
m
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
class(modelo.simple)
plot(modelo.simple)
modelo.simple$residuals
mapply(modelo.simple$residuals, 2, mean)
apply(modelo.simple$residuals, 2, mean)
errores <- modelo.simple$residuals
apply(errores, 2, mean)
View(errores)
var(errores)
cov(errores)
cov(errores)
cov(errores)
var(errores)
cov(errores)
var(errores)-
cov(errores)
cov(errores)
b <- modelo.simple$coefficients
b
b
S <- t(errores)%*%errores/(n-2)
S
S
library(car)
Anova(modelo.simple)
Anova(modelo.simple)
summary(Anova(modelo.simple))
errores <- modelo.simple$residuals
apply(errores, 2, mean)
round(apply(errores, 2, mean), 5)
S <- t(errores)%*%errores/(n-2)
S
S <- t(errores)%*%errores/(n-2)
cov(errores)
apply(errores, 2, cor)
cor(errores)
errores
cor(errores[1])
cor(errores[1,])
cor(errores)
library(mvnormtest)
install.packages("mvnormtest")
library(mvnormtest)
?mvnormtest(errores)
?mshapiro.test(errores)
?mshapiro.test(errores)
mshapiro.test(errores)
data(EuStockMarkets)
C <- t(EuStockMarkets[15:29,1:4])
C
mshapiro.test(C)
mshapiro.test(t(errores))
library(MASS)
mvrnorm(n = 1, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
x <- mvrnorm(n = 1000, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
x
mshapiro.test(x)
mshapiro.test(t(x))
x <- mvrnorm(n = 100, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
mshapiro.test(t(x))
library(mvnormtest)
mshapiro.test(t(errores))
20/30
20/90
27/90
.3*4
27/(90+18)
27/(90+18)
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <-'EXAMPLE1.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
apply(datos,2class)
apply(datos,2,class)
as.numeric(datos)
datos2 <- apply(datos, 2, as.numeric)
View(datos)
View(datos2)
is.na(datos2)
which(is.na(datos2))
datos2[which(is.na(datos2))]
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <-'EXAMPLE1.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
datos2 <- apply(datos, 2, as.numeric)
library(ggplot2)
p1<- ggplot(datos, aes(x=expexted_value, y =risk )) +
geom_point()+theme_minimal()+
theme(legend.position="none")+ggtitle(archivo)
p1
Pareto.frontier <- function(l)
{
a1 <- subset(datos, lambda==l)
M <- 1000000
no.dominado <- c(M, M)
for(i in 1: dim(a1)[1])
{
if(a1[i, 'expexted_value']<=no.dominado[1] &&
a1[i, 'risk']<= no.dominado[2] )
{
index <- i
print(index)
no.dominado <- c(a1[i, 'expexted_value'], a1[i, 'risk'])
}
}
return(as.matrix(c(index,no.dominado[1], no.dominado[2])))
}
frontera <- mapply(FUN = Pareto.frontier, sort(unique(datos$lambda)) )
frontera <- data.frame(iteracion=frontera[1,],
expexcted_value=frontera[2,], risk = frontera[3,] )
frontera$l <- sort(unique(datos$lambda))
p1 <- p1 + geom_point(data = frontera, aes(x=expexcted_value ,
y = risk, col=as.factor(l)))
p1
optimo.pareto <- function(frontera)
{
i <- which.min(frontera$expexcted_value+frontera$risk)
return(frontera[i, ])
}
optim.pareto <- data.frame(optimo.pareto(frontera))
p1 + geom_point(data = optim.pareto, aes(x=expexcted_value,
y = risk), size=5,  colour=I('red'))
View(frontera)
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <- 'E543.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
library(ggplot2)
p1<- ggplot(datos, aes(x=expexted_value, y =risk )) +
geom_point()+theme_minimal()+
theme(legend.position="none")+ggtitle(archivo)
p1
Pareto.frontier <- function(l)
{
a1 <- subset(datos, lambda==l)
M <- 1000000
no.dominado <- c(M, M)
for(i in 1: dim(a1)[1])
{
if(a1[i, 'expexted_value']<=no.dominado[1] &&
a1[i, 'risk']<= no.dominado[2] )
{
index <- i
print(index)
no.dominado <- c(a1[i, 'expexted_value'], a1[i, 'risk'])
}
}
return(as.matrix(c(index,no.dominado[1], no.dominado[2])))
}
frontera <- mapply(FUN = Pareto.frontier, sort(unique(datos$lambda)) )
frontera <- data.frame(iteracion=frontera[1,],
expexcted_value=frontera[2,], risk = frontera[3,] )
frontera$l <- sort(unique(datos$lambda))
p1 <- p1 + geom_point(data = frontera, aes(x=expexcted_value ,
y = risk, col=as.factor(l)))
p1
optimo.pareto <- function(frontera)
{
i <- which.min(frontera$expexcted_value+frontera$risk)
return(frontera[i, ])
}
optim.pareto <- data.frame(optimo.pareto(frontera))
p1 + geom_point(data = optim.pareto, aes(x=expexcted_value,
y = risk), size=5,  colour=I('red'))
View(frontera)
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <-'E87113.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
library(ggplot2)
p1<- ggplot(datos, aes(x=expexted_value, y =risk )) +
geom_point()+theme_minimal()+
theme(legend.position="none")+ggtitle(archivo)
p1
Pareto.frontier <- function(l)
{
a1 <- subset(datos, lambda==l)
M <- 1000000
no.dominado <- c(M, M)
for(i in 1: dim(a1)[1])
{
if(a1[i, 'expexted_value']<=no.dominado[1] &&
a1[i, 'risk']<= no.dominado[2] )
{
index <- i
print(index)
no.dominado <- c(a1[i, 'expexted_value'], a1[i, 'risk'])
}
}
return(as.matrix(c(index,no.dominado[1], no.dominado[2])))
}
frontera <- mapply(FUN = Pareto.frontier, sort(unique(datos$lambda)) )
frontera <- data.frame(iteracion=frontera[1,],
expexcted_value=frontera[2,], risk = frontera[3,] )
frontera$l <- sort(unique(datos$lambda))
p1 <- p1 + geom_point(data = frontera, aes(x=expexcted_value ,
y = risk, col=as.factor(l)))
p1
optimo.pareto <- function(frontera)
{
i <- which.min(frontera$expexcted_value+frontera$risk)
return(frontera[i, ])
}
optim.pareto <- data.frame(optimo.pareto(frontera))
p1 + geom_point(data = optim.pareto, aes(x=expexcted_value,
y = risk), size=5,  colour=I('red'))
View(frontera)
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <- 'GEN.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
library(ggplot2)
p1<- ggplot(datos, aes(x=expexted_value, y =risk )) +
geom_point()+theme_minimal()+
theme(legend.position="none")+ggtitle(archivo)
p1
Pareto.frontier <- function(l)
{
a1 <- subset(datos, lambda==l)
M <- 1000000
no.dominado <- c(M, M)
for(i in 1: dim(a1)[1])
{
if(a1[i, 'expexted_value']<=no.dominado[1] &&
a1[i, 'risk']<= no.dominado[2] )
{
index <- i
print(index)
no.dominado <- c(a1[i, 'expexted_value'], a1[i, 'risk'])
}
}
return(as.matrix(c(index,no.dominado[1], no.dominado[2])))
}
frontera <- mapply(FUN = Pareto.frontier, sort(unique(datos$lambda)) )
frontera <- data.frame(iteracion=frontera[1,],
expexcted_value=frontera[2,], risk = frontera[3,] )
frontera$l <- sort(unique(datos$lambda))
p1 <- p1 + geom_point(data = frontera, aes(x=expexcted_value ,
y = risk, col=as.factor(l)))
p1
optimo.pareto <- function(frontera)
{
i <- which.min(frontera$expexcted_value+frontera$risk)
return(frontera[i, ])
}
optim.pareto <- data.frame(optimo.pareto(frontera))
p1 + geom_point(data = optim.pareto, aes(x=expexcted_value,
y = risk), size=5,  colour=I('red'))
setwd(dir = 'C:\\Users\\fou-f\\Desktop\\ROLOCTS')
dir()
archivo <- 'GEN.TXT_lambda.txt'
datos <- read.table(archivo, header=TRUE, sep ='\t')
library(ggplot2)
p1<- ggplot(datos, aes(x=expexted_value, y =risk )) +
geom_point()+theme_minimal()+
theme(legend.position="none")+ggtitle(archivo)
p1
Pareto.frontier <- function(l)
{
a1 <- subset(datos, lambda==l)
M <- 1000000
no.dominado <- c(M, M)
for(i in 1: dim(a1)[1])
{
if(a1[i, 'expexted_value']<=no.dominado[1] &&
a1[i, 'risk']<= no.dominado[2] )
{
index <- i
print(index)
no.dominado <- c(a1[i, 'expexted_value'], a1[i, 'risk'])
}
}
return(as.matrix(c(index,no.dominado[1], no.dominado[2])))
}
frontera <- mapply(FUN = Pareto.frontier, sort(unique(datos$lambda)) )
frontera <- data.frame(iteracion=frontera[1,],
expexcted_value=frontera[2,], risk = frontera[3,] )
frontera$l <- sort(unique(datos$lambda))
p1 <- p1 + geom_point(data = frontera, aes(x=expexcted_value ,
y = risk, col=as.factor(l)))
p1
optimo.pareto <- function(frontera)
{
i <- which.min(frontera$expexcted_value+frontera$risk)
return(frontera[i, ])
}
optim.pareto <- data.frame(optimo.pareto(frontera))
p1 + geom_point(data = optim.pareto, aes(x=expexcted_value,
y = risk), size=5,  colour=I('red'))
View(frontera)
