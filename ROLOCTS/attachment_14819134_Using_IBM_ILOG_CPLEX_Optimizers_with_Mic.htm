<HTML>
<HEAD>
<TITLE>Using IBM ILOG CPLEX Optimizers with Microsoft Visual C++</TITLE>
	<STYLE>
	<!--
		H1 { font-family: "arial", "sans-serif"; color: #406ec1 }
		H2 { font-family: "arial", "sans-serif"; color: #406ec1 }
		H3 { font-family: "arial", "sans-serif"; color: #406ec1 }
		H4 { font-family: "arial", "sans-serif"; color: #406ec1 }
		HR { color: #406ec1}
		CODE { font-family: "courier", "courier-new", "serif"; font-size: 12pt}
		BODY { font-family: "arial", "sans-serif" }
		TH { background-color: #CCCCFF; font-family: "arial" }
		TD { font-family: "arial", "sans-serif"; font-size=10pt }
		P { font-family: "arial", "sans-serif" }
		PRE { font-family: "arial", "sans-serif" }
	-->
	</STYLE>
</HEAD>
<BODY>

<H2>Using IBM ILOG CPLEX Optimizers with Microsoft Visual C++</H2>

This file describes how to use Microsoft Visual Studio to:
<UL><LI>
   build and run the C and C++ examples delivered with the CPLEX&reg; Optimizers (see
<a href="dotnet.html">dotnet.html</a> for the C# and VB.NET examples).
</LI><LI>
   create a C or C++ project and link the target with CPLEX.
</LI></UL>
<HR>
<H3>CPLEX Optimizers Installation Folder</H3> Throughout this document, the
CPLEX installation folder is referred to as
<CODE>&lt;CPLEXDIR&gt;</CODE>, and the Concert Technology installation
folder is referred to as <CODE>&lt;CONCERTDIR&gt;</CODE>.
<P>
For example, if CPLEX Studio has been installed in the folder
<CODE>C:\Program Files\IBM\ILOG\CPLEX_Studio123</CODE>  references to
<CODE>&lt;CPLEXDIR&gt;\include</CODE> represent
<CODE>C:\Program Files\IBM\ILOG\CPLEX_Studio123\cplex\include</CODE>.  Concert
Technology is located in <CODE>C:\Program Files\IBM\ILOG\CPLEX_Studio123\concert</CODE>. 
<HR> <H3>Libraries</H3>
The Concert Technology libraries are delivered in two static
formats for Visual Studio 2008 (<CODE>x86_windows_vs2008</CODE>),
so that a static executable can be linked with libcmt.lib
or msvcrt.lib.  These two formats use the standard template library
(STL) and are compiled using the namespace <CODE>std</CODE>.
Similarly, for
Visual Studio 2010(<CODE>x86_windows_vs2010</CODE> or
<CODE>x64_windows_2010</CODE>), the same two formats are supported:
multi-threaded, and multi-threaded DLL.  
<P>
The CPLEX library is delivered as a DLL so
that it may be used with any of the library formats, but there is an
associated library file of each format with which to link. 
<HR>
<H4>Library Locations</H4>

<P>Visual Studio 2008 libraries can be found in the following directories:
<P>
<TABLE BORDER="0">
<TR VALIGN="TOP"><TD>
- multi-threaded STL
</TD><TD>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2008\stat_mta\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2008\stat_mta\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x86_windows_vs2008\stat_mta\concert.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2008\stat_mta\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2008\stat_mta\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x64_windows_vs2008\stat_mta\concert.lib</CODE><BR>
: These libraries must be linked with <CODE>libcmt.lib</CODE><BR></TD></TR>
<TR VALIGN="TOP"><TD>
- multi-threaded-DLL STL
</TD><TD>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2008\stat_mda\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2008\stat_mda\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x86_windows_vs2008\stat_mda\concert.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2008\stat_mda\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2008\stat_mda\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x64_windows_vs2008\stat_mda\concert.lib</CODE><BR>
: These libraries must be linked with <CODE>msvcrt.lib</CODE><BR></TD></TR>
</TABLE>

<P>Visual Studio 2010 libraries can be found in the following directories:
<P>
<TABLE BORDER="0">
<TR VALIGN="TOP"><TD>
- multi-threaded STL
</TD><TD>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2010\stat_mta\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2010\stat_mta\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x86_windows_vs2010\stat_mta\concert.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2010\stat_mta\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2010\stat_mta\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x64_windows_vs2010\stat_mta\concert.lib</CODE><BR>
: These libraries must be linked with <CODE>libcmt.lib</CODE><BR></TD></TR>
<TR VALIGN="TOP"><TD>
- multi-threaded-DLL STL
</TD><TD>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2010\stat_mda\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2010\stat_mda\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x86_windows_vs2010\stat_mda\concert.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2010\stat_mda\ilocplex.lib</CODE><BR>
: <CODE>&lt;CPLEXDIR&gt;\lib\x64_windows_vs2010\stat_mda\cplex123.lib</CODE><BR>
: <CODE>&lt;CONCERTDIR&gt;\lib\x64_windows_vs2010\stat_mda\concert.lib</CODE><BR>
: These libraries must be linked with <CODE>msvcrt.lib</CODE><BR></TD></TR>
</TABLE>

<HR>
<H3>Building and Running CPLEX Examples</H3>
The C and C++ CPLEX examples have
all been gathered in one project for each type of static format
(<CODE>mta</CODE> and <CODE>mda</CODE>).  The
instructions below use the <CODE>mta</CODE> format for the Visual Studio 2008
environment, but similar 
instructions apply when using the project file for another format or with
Visual Studio 2010.
The related file for the <CODE>mda</CODE> format is
<CODE>&lt;CPLEXDIR&gt;\examples\x86_windows_vs2008\stat_mda\examples.sln</CODE>.
Be aware that the order of the instructions below is important.

<OL><!-- ordered list describing task(s) -->
<LI>
Start Microsoft Visual Studio 2008.
</LI>
<P>
<LI>
From the <B>File</B> menu, choose <B>Open Project/Solution</B>.<BR>
The <B>Open Project</B> dialog box appears.<BR>
  <UL>
  <LI>Select the folder <CODE>&lt;CPLEXDIR&gt;\examples\x86_windows_vs2008\stat_mta</CODE>.
  </LI>
  <LI>Select the <CODE>examples.sln</CODE> file and click <B>Open</B>.
  </LI>
  </UL>
</LI>
<P>
<LI>
To build only one example (for instance, <CODE>blend</CODE>):
  <UL>
  <LI>Select the <CODE>blend</CODE> project in the 
    <B>Solution Explorer</B> window.
  </LI>
  <LI>From the <B>Build</B> menu, choose <B>Build blend</B>.<BR>
	Wait for the completion of the building process.
  </LI>
  <P>
  </UL>
</LI>
<LI>
To build all of the examples:
  <UL>
  <LI>From the <B>Build</B> menu, choose <B>Build Solution</B><BR>
	Wait for the completion of the building process.
  </LI>
  </UL>
</LI>
<P>
<LI>
To run an example (for instance, <CODE>blend</CODE>):
  <UL>
  <LI>Open a command prompt window by running the Visual Studio 2008 Command Prompt.<BR>
	In the window <B>Visual Studio 2008 Command prompt</B>:
    <UL>
    <LI>Type <CODE>set path=%path%;&lt;CPLEXDIR&gt;\bin\x86_win32</CODE> so that
	<CODE>cplex123.dll</CODE> is on the path.
     </LI>
    <LI>Type <CODE>&lt;CPLEXDIR&gt;\examples\x86_windows_vs2008\stat_mta\blend</CODE>.
    </LI>
    <LI>The result is then displayed. The setting of the <CODE>path</CODE> environment variable
	is only necessary if the this folder is not already on the <CODE>path</CODE>.  The default
	installer action is to modify the path to include this folder.
    </LI>
    </UL>
  </LI>
  </UL>
<P>
</LI>
</OL><!-- closing the ordered list -->

<HR>
<H3>Building Your Own Project which Links with CPLEX</H3>

<B>Note:</B><BR> The information below applies to the
Visual C++ 2008 multi-threaded STL library.  If you use another
version of the library, set the <B>Runtime Library</B> option to
match the library version. 
If you use Visual Studio 2010, the instructions below
should apply, except that <CODE>x86_windows_vs2008</CODE> should be
replaced with <CODE>x86_windows_vs2010</CODE> whenever a path name is specified.
<P>
<P>
Let's assume that you want to build a target named
<CODE>test.exe</CODE> and have:
<UL>
<LI> a source file named <CODE>test.cpp</CODE> which uses Concert Technology or
<CODE>test.c</CODE> which uses the C API of the CPLEX Callable Library;
</LI>
<LI> a folder where this file is located and which, for the sake of simplicity,
we'll refer to as <CODE>&lt;MYAPPDIR&gt;</CODE>.
</LI>
</UL>

<P>
One way to achieve that is to create a project named <CODE>test.vcproj</CODE>
as described here. Be aware that the order of instructions is important.
Note that project files for VS2010 have the extension <CODE>vcxproj</CODE>.
<OL><!-- opening an ordered list -->
<LI>
Start Microsoft Visual Studio 2008.  <BR>
</LI><P>
<LI>
The first step is to build the <CODE>test.sln</CODE> solution.<BR>
From the <B>File</B> menu, select <B>New-></B>, and then <B>Project...</B
>.<BR><P>
The <B>New Project</B> dialog box appears.
  <UL><!-- adding unordered list 1 within the ordered list at item 2 -->
  <LI> In the <B>Project types</B> pane, select <B>Visual C++</B> and <B>Win32</B>.
  </LI>
  <LI> In the <B>Templates</B> pane, select the <B>Win32 Console Application</B> icon.
  </LI>
  <LI> Fill in the project name (<CODE>test</CODE>).
  </LI>
  <LI> If necessary, correct the location of the project (to <CODE>&lt;MYAPPDIR&gt;</CODE>)
  </LI>
  <LI> Click <b>OK</b>
  </LI>
  </UL><!-- closing unordered list 1 --></LI>
  <P>
When the <B>Win32 Application Wizard</B> appears...
  <UL><!-- adding unordered list 1 within the ordered list at item 3 -->
  <LI>Click on <B>Application Settings</B>.
  </LI>
  <LI>Select <B>Console Application</B> as <B>Application type</B>.
  </LI>
  <LI>Make sure that <B>Empty project</B> is checked in <B>Additional Options</B>.
  </LI>
  <LI>Click <B>Finish</B>.
  </LI><P>
  </UL><!-- closing unordered list 1 -->
This creates a solution, <CODE>test</CODE>, with a single project, <CODE>test</CODE>.
You can see the contents of the solution by selecting <B>Solution Explorer</B> in
the <B>View</B> menu. 
</LI><P>
<LI>
Now you must add your source file to the project.  From the <B>Project</B> menu,
choose <B>Add Existing Item...</B>
  <UL><!-- adding unordered list 1 within the ordered list at item 2 -->
  <LI>Move to the folder <CODE>&lt;MYAPPDIR&gt;</CODE> and select
     <CODE>test.cpp</CODE> or <CODE>test.c</CODE>.
  </LI>
  <LI>Click <b>Open</b>.
  </LI><P>
  </UL><!-- closing unordered list 1 -->
</LI><P>
<LI>
Next, you have to set some options so that the project knows where
to find the CPLEX and Concert include files and the CPLEX and Concert
libraries.<BR><P>
From the <B>Project</B> menu, choose <B>Properties</B>.<BR>
The <B>test Property Pages</B> dialog box appears.<P>
In the <B>Configuration</B> drop-down list, select <B>Release</B>.<P>
Select <B>C/C++</B> in the <B>Configuration Properties</B> tree.
  <UL>
  <LI>Select <B>General</B>:
    <UL>
    <LI>In the <B>Additional Include Directories</B> field, add the directories:
      <UL>
      <LI><CODE>&lt;CPLEXDIR&gt;\include</CODE>.
      </LI>
      <LI><CODE>&lt;CONCERTDIR&gt;\include</CODE>.
      </LI>
      </UL><!--Closing unordered list 2-->
    </LI>
    <LI>For <B>Debug Information Format</B>, choose <B>Disabled (/Zd)</B>.
    </LI>
    <LI>Choose <B>No</B> for <B>Detect 64-bit Portability Issues</B>. Note that
        these settings are not available in the Visual Studio 2010 IDE
        and can be omitted.<P>
    </LI>
    </UL>
  </LI><P>
  <LI>Select <B>Preprocessor</B>:
    <UL><!-- adding unordered list 2 within the ordered list -->
    <LI>Add <CODE>IL_STD</CODE> to the <B>Preprocessor Definitions</B> field.
	This defines the macro IL_STD which is needed to use the STL.
    </LI>
    </UL>
  </LI><P>
  <LI>Select <B>Code Generation</B>:
    <UL><!-- adding unordered list 2 within the ordered list -->
    <LI>Set <B>Runtime Library</B> to <B>Multi-threaded (/MT)</B>.<P>
    </LI>
    </UL><!--Closing unordered list 2-->
  </LI>
  </UL>
Select <B>Linker</B> in the <B>Configuration Properties</B> tree.
  <UL>
  <LI>Select <B>General</B> and then select <B>Additional Library Directoriess</B>.  Add the files:
    <UL>
    <LI><CODE>&lt;CPLEXDIR&gt;\lib\x86_windows_vs2008\stat_mta</CODE></LI>
    <LI><CODE>&lt;CONCERTDIR&gt;\lib\x86_windows_vs2008\stat_mta</CODE></LI>
    </UL>
  </LI>
  <LI>Select <B>Input</B> and then select <B>Additional Dependencies</B>.  Add the files:
    <UL>
    <LI><CODE>cplex123.lib</CODE></LI>
    <LI><CODE>ilocplex.lib</CODE></LI>
    <LI><CODE>concert.lib</CODE></LI>
    </UL>
     The latter two are only necessary if you are using Concert Technology.<P>
  </LI>
  </UL>
Click <B>OK</B> to close the <B>test Property Pages</B> dialog box.
</LI><P>
<LI>
Next, you have to set the default project configuration.<P>
        
From the <B>Build</B> menu, select <B>Configuration Manager...</B>
  <UL>
  <LI>Select <B>Release</B> in the <B>Active Solution Configuration</B> drop-down list.</LI>
  <LI>Click <B>Close</B>.</LI><P>
  </UL>
</LI>
<LI>
Finally, to build the project, from the <B>Build</B> menu, select <B>Build Solution</B>
</LI>
</OL>
After completion of the compiling and linking process, the target is created.
The full path of the <CODE>test.exe</CODE> is
<CODE>&lt;MYAPPDIR&gt;\test\Release\test.exe</CODE>.
<P>
<HR>
<B>Remark:</B>
<HR>
<P>
From the Concert point of view, the only difference between the
Win32 Release and Win32 Debug targets is:
<UL>
<LI>the <CODE>NDEBUG</CODE> macro is defined for the Win32 Release target.
</LI>
<LI>the <CODE>NDEBUG</CODE> macro is not defined for the Win32 Debug target.
</LI>
</UL>
This is why we have suggested using Release in the test.sln
example, even though it is not the default proposed by Visual C++.
Refer to the Visual C++ Reference Manual for full information on
Release and Debug configurations.
<P>
The interaction of the <CODE>NDEBUG</CODE> macro and the Concert
inline member functions is documented in the Concepts section of the
CPLEX C++ API Reference Manual.

</BODY>
</HTML>
R